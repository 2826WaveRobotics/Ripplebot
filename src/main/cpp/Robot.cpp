// RobotBuilder Version: 4.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

// ROBOTBUILDER TYPE: Robot.

#include "Robot.h"

#include <iostream>
#include <frc/smartdashboard/SmartDashboard.h>
#include <frc2/command/CommandScheduler.h>

void Robot::RobotInit() 
{
  m_container->m_drive.TankDrive(0.0, 0.0);
  m_container->m_intake.SetIntakeArmSpeed(0.0);
  m_container->m_intake.SetIntakeRollerSpeed(0.0);
}

/**
 * This function is called every robot packet, no matter the mode. Use
 * this for items like diagnostics that you want to run during disabled,
 * autonomous, teleoperated and test.
 *
 * <p> This runs after the mode specific periodic functions, but before
 * LiveWindow and SmartDashboard integrated updating.
 */
void Robot::RobotPeriodic() { frc2::CommandScheduler::GetInstance().Run(); }

/**
 * This function is called once each time the robot enters Disabled mode. You
 * can use it to reset any subsystem information you want to clear when the
 * robot is disabled.
 */
void Robot::DisabledInit() {
  m_container->m_drive.TankDrive(0.0, 0.0);
  m_container->m_intake.SetIntakeArmSpeed(0.0);
  m_container->m_intake.SetIntakeRollerSpeed(0.0);
}

void Robot::DisabledPeriodic() {}

/**
 * This autonomous runs the autonomous command selected by your {@link
 * RobotContainer} class.
 */
void Robot::AutonomousInit() {
  m_autonomousCommand = m_container->GetAutonomousCommand();

  if (m_autonomousCommand != nullptr) {
    m_autonomousCommand->Schedule();
  }
}

void Robot::AutonomousPeriodic() {}

void Robot::TeleopInit() {
  // This makes sure that the autonomous stops running when
  // teleop starts running. If you want the autonomous to
  // continue until interrupted by another command, remove
  // this line or comment it out.
  if (m_autonomousCommand != nullptr) {
    m_autonomousCommand->Cancel();
    m_autonomousCommand = nullptr;
  }
}

/**
 * This function is called periodically during operator control.
 */
void Robot::TeleopPeriodic() {

  // INTAKE
  double intakeArmSpeed = m_container->getOperatorJS()->GetLeftY();
  double intakeRollerIn = m_container->getOperatorJS()->GetRightTriggerAxis();
  double intakeRollerOut = m_container->getOperatorJS()->GetLeftTriggerAxis();
  double intakeRollerSpeed = 0.0;
  // intake arm
  if (fabs(intakeArmSpeed) < 0.07) {
    intakeArmSpeed = 0;
  }
  // intake rollers
  if (intakeRollerIn >= 0.07) {
    intakeRollerSpeed = -intakeRollerIn;
  } else if (intakeRollerOut >= 0.07) {
    intakeRollerSpeed = intakeRollerOut;
  }
  std::cout << intakeRollerIn << "     " << intakeRollerOut << "     " << intakeRollerSpeed << std::endl;
  // set intake motors
  if (intakeRollerSpeed > 0.0f) {
    intakeRollerSpeed = 0.001f;
  }
  m_container->m_intake.SetIntakeArmSpeed(intakeArmSpeed);
  m_container->m_intake.SetIntakeRollerSpeed(intakeRollerSpeed * 0.8f);

  // DRIVE
  double leftDriveSpeed = m_container->getDriverJS()->GetLeftY();
  double rightDriveSpeed = m_container->getDriverJS()->GetRightY();
  if (fabs(leftDriveSpeed) < 0.07) {
    leftDriveSpeed = 0.0;
  }
  if (fabs(rightDriveSpeed) < 0.07) {
    rightDriveSpeed = 0.0;
  }
  // set drive motors
  m_container->m_drive.TankDrive(leftDriveSpeed, rightDriveSpeed);
  

} // end teleop

/**
 * This function is called periodically during test mode.
 */
void Robot::TestPeriodic() {}

#ifndef RUNNING_FRC_TESTS
int main() { return frc::StartRobot<Robot>(); }
#endif
